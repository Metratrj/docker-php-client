<?php

/**
 * ContainerInspectResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.50) is used. For example, calling `/info` is the same as calling `/v1.51/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means the server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.51
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ContainerInspectResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContainerInspectResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ContainerInspectResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created' => 'string',
        'path' => 'string',
        'args' => 'string[]',
        'state' => '\OpenAPI\Client\Model\ContainerState',
        'image' => 'string',
        'resolv_conf_path' => 'string',
        'hostname_path' => 'string',
        'hosts_path' => 'string',
        'log_path' => 'string',
        'name' => 'string',
        'restart_count' => 'int',
        'driver' => 'string',
        'platform' => 'string',
        'image_manifest_descriptor' => '\OpenAPI\Client\Model\OCIDescriptor',
        'mount_label' => 'string',
        'process_label' => 'string',
        'app_armor_profile' => 'string',
        'exec_ids' => 'string[]',
        'host_config' => '\OpenAPI\Client\Model\HostConfig',
        'graph_driver' => '\OpenAPI\Client\Model\DriverData',
        'size_rw' => 'int',
        'size_root_fs' => 'int',
        'mounts' => '\OpenAPI\Client\Model\MountPoint[]',
        'config' => '\OpenAPI\Client\Model\ContainerConfig',
        'network_settings' => '\OpenAPI\Client\Model\NetworkSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created' => 'dateTime',
        'path' => null,
        'args' => null,
        'state' => null,
        'image' => null,
        'resolv_conf_path' => null,
        'hostname_path' => null,
        'hosts_path' => null,
        'log_path' => null,
        'name' => null,
        'restart_count' => null,
        'driver' => null,
        'platform' => null,
        'image_manifest_descriptor' => null,
        'mount_label' => null,
        'process_label' => null,
        'app_armor_profile' => null,
        'exec_ids' => null,
        'host_config' => null,
        'graph_driver' => null,
        'size_rw' => 'int64',
        'size_root_fs' => 'int64',
        'mounts' => null,
        'config' => null,
        'network_settings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created' => true,
        'path' => false,
        'args' => false,
        'state' => true,
        'image' => false,
        'resolv_conf_path' => false,
        'hostname_path' => false,
        'hosts_path' => false,
        'log_path' => true,
        'name' => false,
        'restart_count' => false,
        'driver' => false,
        'platform' => false,
        'image_manifest_descriptor' => false,
        'mount_label' => false,
        'process_label' => false,
        'app_armor_profile' => false,
        'exec_ids' => true,
        'host_config' => false,
        'graph_driver' => false,
        'size_rw' => true,
        'size_root_fs' => true,
        'mounts' => false,
        'config' => false,
        'network_settings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'created' => 'Created',
        'path' => 'Path',
        'args' => 'Args',
        'state' => 'State',
        'image' => 'Image',
        'resolv_conf_path' => 'ResolvConfPath',
        'hostname_path' => 'HostnamePath',
        'hosts_path' => 'HostsPath',
        'log_path' => 'LogPath',
        'name' => 'Name',
        'restart_count' => 'RestartCount',
        'driver' => 'Driver',
        'platform' => 'Platform',
        'image_manifest_descriptor' => 'ImageManifestDescriptor',
        'mount_label' => 'MountLabel',
        'process_label' => 'ProcessLabel',
        'app_armor_profile' => 'AppArmorProfile',
        'exec_ids' => 'ExecIDs',
        'host_config' => 'HostConfig',
        'graph_driver' => 'GraphDriver',
        'size_rw' => 'SizeRw',
        'size_root_fs' => 'SizeRootFs',
        'mounts' => 'Mounts',
        'config' => 'Config',
        'network_settings' => 'NetworkSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'path' => 'setPath',
        'args' => 'setArgs',
        'state' => 'setState',
        'image' => 'setImage',
        'resolv_conf_path' => 'setResolvConfPath',
        'hostname_path' => 'setHostnamePath',
        'hosts_path' => 'setHostsPath',
        'log_path' => 'setLogPath',
        'name' => 'setName',
        'restart_count' => 'setRestartCount',
        'driver' => 'setDriver',
        'platform' => 'setPlatform',
        'image_manifest_descriptor' => 'setImageManifestDescriptor',
        'mount_label' => 'setMountLabel',
        'process_label' => 'setProcessLabel',
        'app_armor_profile' => 'setAppArmorProfile',
        'exec_ids' => 'setExecIds',
        'host_config' => 'setHostConfig',
        'graph_driver' => 'setGraphDriver',
        'size_rw' => 'setSizeRw',
        'size_root_fs' => 'setSizeRootFs',
        'mounts' => 'setMounts',
        'config' => 'setConfig',
        'network_settings' => 'setNetworkSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'path' => 'getPath',
        'args' => 'getArgs',
        'state' => 'getState',
        'image' => 'getImage',
        'resolv_conf_path' => 'getResolvConfPath',
        'hostname_path' => 'getHostnamePath',
        'hosts_path' => 'getHostsPath',
        'log_path' => 'getLogPath',
        'name' => 'getName',
        'restart_count' => 'getRestartCount',
        'driver' => 'getDriver',
        'platform' => 'getPlatform',
        'image_manifest_descriptor' => 'getImageManifestDescriptor',
        'mount_label' => 'getMountLabel',
        'process_label' => 'getProcessLabel',
        'app_armor_profile' => 'getAppArmorProfile',
        'exec_ids' => 'getExecIds',
        'host_config' => 'getHostConfig',
        'graph_driver' => 'getGraphDriver',
        'size_rw' => 'getSizeRw',
        'size_root_fs' => 'getSizeRootFs',
        'mounts' => 'getMounts',
        'config' => 'getConfig',
        'network_settings' => 'getNetworkSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('args', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('resolv_conf_path', $data ?? [], null);
        $this->setIfExists('hostname_path', $data ?? [], null);
        $this->setIfExists('hosts_path', $data ?? [], null);
        $this->setIfExists('log_path', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('restart_count', $data ?? [], null);
        $this->setIfExists('driver', $data ?? [], null);
        $this->setIfExists('platform', $data ?? [], null);
        $this->setIfExists('image_manifest_descriptor', $data ?? [], null);
        $this->setIfExists('mount_label', $data ?? [], null);
        $this->setIfExists('process_label', $data ?? [], null);
        $this->setIfExists('app_armor_profile', $data ?? [], null);
        $this->setIfExists('exec_ids', $data ?? [], null);
        $this->setIfExists('host_config', $data ?? [], null);
        $this->setIfExists('graph_driver', $data ?? [], null);
        $this->setIfExists('size_rw', $data ?? [], null);
        $this->setIfExists('size_root_fs', $data ?? [], null);
        $this->setIfExists('mounts', $data ?? [], null);
        $this->setIfExists('config', $data ?? [], null);
        $this->setIfExists('network_settings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && (mb_strlen($this->container['id']) > 64)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['id']) && (mb_strlen($this->container['id']) < 64)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 64.";
        }

        if (!is_null($this->container['id']) && !preg_match("/^[0-9a-fA-F]{64}$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^[0-9a-fA-F]{64}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of this container as a 128-bit (64-character) hexadecimal string (32 bytes).
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if ((mb_strlen($id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $id when calling ContainerInspectResponse., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($id) < 64)) {
            throw new \InvalidArgumentException('invalid length for $id when calling ContainerInspectResponse., must be bigger than or equal to 64.');
        }
        if ((!preg_match("/^[0-9a-fA-F]{64}$/", ObjectSerializer::toString($id)))) {
            throw new \InvalidArgumentException("invalid value for \$id when calling ContainerInspectResponse., must conform to the pattern /^[0-9a-fA-F]{64}$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string|null $created Date and time at which the container was created, formatted in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            array_push($this->openAPINullablesSetToNull, 'created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path The path to the command being run
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets args
     *
     * @return string[]|null
     */
    public function getArgs()
    {
        return $this->container['args'];
    }

    /**
     * Sets args
     *
     * @param string[]|null $args The arguments to the command being run
     *
     * @return self
     */
    public function setArgs($args)
    {
        if (is_null($args)) {
            throw new \InvalidArgumentException('non-nullable args cannot be null');
        }
        $this->container['args'] = $args;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \OpenAPI\Client\Model\ContainerState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \OpenAPI\Client\Model\ContainerState|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            array_push($this->openAPINullablesSetToNull, 'state');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image The ID (digest) of the image that this container was created from.
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets resolv_conf_path
     *
     * @return string|null
     */
    public function getResolvConfPath()
    {
        return $this->container['resolv_conf_path'];
    }

    /**
     * Sets resolv_conf_path
     *
     * @param string|null $resolv_conf_path Location of the `/etc/resolv.conf` generated for the container on the host.  This file is managed through the docker daemon, and should not be accessed or modified by other tools.
     *
     * @return self
     */
    public function setResolvConfPath($resolv_conf_path)
    {
        if (is_null($resolv_conf_path)) {
            throw new \InvalidArgumentException('non-nullable resolv_conf_path cannot be null');
        }
        $this->container['resolv_conf_path'] = $resolv_conf_path;

        return $this;
    }

    /**
     * Gets hostname_path
     *
     * @return string|null
     */
    public function getHostnamePath()
    {
        return $this->container['hostname_path'];
    }

    /**
     * Sets hostname_path
     *
     * @param string|null $hostname_path Location of the `/etc/hostname` generated for the container on the host.  This file is managed through the docker daemon, and should not be accessed or modified by other tools.
     *
     * @return self
     */
    public function setHostnamePath($hostname_path)
    {
        if (is_null($hostname_path)) {
            throw new \InvalidArgumentException('non-nullable hostname_path cannot be null');
        }
        $this->container['hostname_path'] = $hostname_path;

        return $this;
    }

    /**
     * Gets hosts_path
     *
     * @return string|null
     */
    public function getHostsPath()
    {
        return $this->container['hosts_path'];
    }

    /**
     * Sets hosts_path
     *
     * @param string|null $hosts_path Location of the `/etc/hosts` generated for the container on the host.  This file is managed through the docker daemon, and should not be accessed or modified by other tools.
     *
     * @return self
     */
    public function setHostsPath($hosts_path)
    {
        if (is_null($hosts_path)) {
            throw new \InvalidArgumentException('non-nullable hosts_path cannot be null');
        }
        $this->container['hosts_path'] = $hosts_path;

        return $this;
    }

    /**
     * Gets log_path
     *
     * @return string|null
     */
    public function getLogPath()
    {
        return $this->container['log_path'];
    }

    /**
     * Sets log_path
     *
     * @param string|null $log_path Location of the file used to buffer the container's logs. Depending on the logging-driver used for the container, this field may be omitted.  This file is managed through the docker daemon, and should not be accessed or modified by other tools.
     *
     * @return self
     */
    public function setLogPath($log_path)
    {
        if (is_null($log_path)) {
            array_push($this->openAPINullablesSetToNull, 'log_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('log_path', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['log_path'] = $log_path;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name associated with this container.  For historic reasons, the name may be prefixed with a forward-slash (`/`).
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets restart_count
     *
     * @return int|null
     */
    public function getRestartCount()
    {
        return $this->container['restart_count'];
    }

    /**
     * Sets restart_count
     *
     * @param int|null $restart_count Number of times the container was restarted since it was created, or since daemon was started.
     *
     * @return self
     */
    public function setRestartCount($restart_count)
    {
        if (is_null($restart_count)) {
            throw new \InvalidArgumentException('non-nullable restart_count cannot be null');
        }
        $this->container['restart_count'] = $restart_count;

        return $this;
    }

    /**
     * Gets driver
     *
     * @return string|null
     */
    public function getDriver()
    {
        return $this->container['driver'];
    }

    /**
     * Sets driver
     *
     * @param string|null $driver The storage-driver used for the container's filesystem (graph-driver or snapshotter).
     *
     * @return self
     */
    public function setDriver($driver)
    {
        if (is_null($driver)) {
            throw new \InvalidArgumentException('non-nullable driver cannot be null');
        }
        $this->container['driver'] = $driver;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string|null
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string|null $platform The platform (operating system) for which the container was created.  This field was introduced for the experimental \"LCOW\" (Linux Containers On Windows) features, which has been removed. In most cases, this field is equal to the host's operating system (`linux` or `windows`).
     *
     * @return self
     */
    public function setPlatform($platform)
    {
        if (is_null($platform)) {
            throw new \InvalidArgumentException('non-nullable platform cannot be null');
        }
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets image_manifest_descriptor
     *
     * @return \OpenAPI\Client\Model\OCIDescriptor|null
     */
    public function getImageManifestDescriptor()
    {
        return $this->container['image_manifest_descriptor'];
    }

    /**
     * Sets image_manifest_descriptor
     *
     * @param \OpenAPI\Client\Model\OCIDescriptor|null $image_manifest_descriptor image_manifest_descriptor
     *
     * @return self
     */
    public function setImageManifestDescriptor($image_manifest_descriptor)
    {
        if (is_null($image_manifest_descriptor)) {
            throw new \InvalidArgumentException('non-nullable image_manifest_descriptor cannot be null');
        }
        $this->container['image_manifest_descriptor'] = $image_manifest_descriptor;

        return $this;
    }

    /**
     * Gets mount_label
     *
     * @return string|null
     */
    public function getMountLabel()
    {
        return $this->container['mount_label'];
    }

    /**
     * Sets mount_label
     *
     * @param string|null $mount_label SELinux mount label set for the container.
     *
     * @return self
     */
    public function setMountLabel($mount_label)
    {
        if (is_null($mount_label)) {
            throw new \InvalidArgumentException('non-nullable mount_label cannot be null');
        }
        $this->container['mount_label'] = $mount_label;

        return $this;
    }

    /**
     * Gets process_label
     *
     * @return string|null
     */
    public function getProcessLabel()
    {
        return $this->container['process_label'];
    }

    /**
     * Sets process_label
     *
     * @param string|null $process_label SELinux process label set for the container.
     *
     * @return self
     */
    public function setProcessLabel($process_label)
    {
        if (is_null($process_label)) {
            throw new \InvalidArgumentException('non-nullable process_label cannot be null');
        }
        $this->container['process_label'] = $process_label;

        return $this;
    }

    /**
     * Gets app_armor_profile
     *
     * @return string|null
     */
    public function getAppArmorProfile()
    {
        return $this->container['app_armor_profile'];
    }

    /**
     * Sets app_armor_profile
     *
     * @param string|null $app_armor_profile The AppArmor profile set for the container.
     *
     * @return self
     */
    public function setAppArmorProfile($app_armor_profile)
    {
        if (is_null($app_armor_profile)) {
            throw new \InvalidArgumentException('non-nullable app_armor_profile cannot be null');
        }
        $this->container['app_armor_profile'] = $app_armor_profile;

        return $this;
    }

    /**
     * Gets exec_ids
     *
     * @return string[]|null
     */
    public function getExecIds()
    {
        return $this->container['exec_ids'];
    }

    /**
     * Sets exec_ids
     *
     * @param string[]|null $exec_ids IDs of exec instances that are running in the container.
     *
     * @return self
     */
    public function setExecIds($exec_ids)
    {
        if (is_null($exec_ids)) {
            array_push($this->openAPINullablesSetToNull, 'exec_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exec_ids', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exec_ids'] = $exec_ids;

        return $this;
    }

    /**
     * Gets host_config
     *
     * @return \OpenAPI\Client\Model\HostConfig|null
     */
    public function getHostConfig()
    {
        return $this->container['host_config'];
    }

    /**
     * Sets host_config
     *
     * @param \OpenAPI\Client\Model\HostConfig|null $host_config host_config
     *
     * @return self
     */
    public function setHostConfig($host_config)
    {
        if (is_null($host_config)) {
            throw new \InvalidArgumentException('non-nullable host_config cannot be null');
        }
        $this->container['host_config'] = $host_config;

        return $this;
    }

    /**
     * Gets graph_driver
     *
     * @return \OpenAPI\Client\Model\DriverData|null
     */
    public function getGraphDriver()
    {
        return $this->container['graph_driver'];
    }

    /**
     * Sets graph_driver
     *
     * @param \OpenAPI\Client\Model\DriverData|null $graph_driver graph_driver
     *
     * @return self
     */
    public function setGraphDriver($graph_driver)
    {
        if (is_null($graph_driver)) {
            throw new \InvalidArgumentException('non-nullable graph_driver cannot be null');
        }
        $this->container['graph_driver'] = $graph_driver;

        return $this;
    }

    /**
     * Gets size_rw
     *
     * @return int|null
     */
    public function getSizeRw()
    {
        return $this->container['size_rw'];
    }

    /**
     * Sets size_rw
     *
     * @param int|null $size_rw The size of files that have been created or changed by this container.  This field is omitted by default, and only set when size is requested in the API request.
     *
     * @return self
     */
    public function setSizeRw($size_rw)
    {
        if (is_null($size_rw)) {
            array_push($this->openAPINullablesSetToNull, 'size_rw');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('size_rw', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['size_rw'] = $size_rw;

        return $this;
    }

    /**
     * Gets size_root_fs
     *
     * @return int|null
     */
    public function getSizeRootFs()
    {
        return $this->container['size_root_fs'];
    }

    /**
     * Sets size_root_fs
     *
     * @param int|null $size_root_fs The total size of all files in the read-only layers from the image that the container uses. These layers can be shared between containers.  This field is omitted by default, and only set when size is requested in the API request.
     *
     * @return self
     */
    public function setSizeRootFs($size_root_fs)
    {
        if (is_null($size_root_fs)) {
            array_push($this->openAPINullablesSetToNull, 'size_root_fs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('size_root_fs', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['size_root_fs'] = $size_root_fs;

        return $this;
    }

    /**
     * Gets mounts
     *
     * @return \OpenAPI\Client\Model\MountPoint[]|null
     */
    public function getMounts()
    {
        return $this->container['mounts'];
    }

    /**
     * Sets mounts
     *
     * @param \OpenAPI\Client\Model\MountPoint[]|null $mounts List of mounts used by the container.
     *
     * @return self
     */
    public function setMounts($mounts)
    {
        if (is_null($mounts)) {
            throw new \InvalidArgumentException('non-nullable mounts cannot be null');
        }
        $this->container['mounts'] = $mounts;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \OpenAPI\Client\Model\ContainerConfig|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \OpenAPI\Client\Model\ContainerConfig|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        if (is_null($config)) {
            throw new \InvalidArgumentException('non-nullable config cannot be null');
        }
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets network_settings
     *
     * @return \OpenAPI\Client\Model\NetworkSettings|null
     */
    public function getNetworkSettings()
    {
        return $this->container['network_settings'];
    }

    /**
     * Sets network_settings
     *
     * @param \OpenAPI\Client\Model\NetworkSettings|null $network_settings network_settings
     *
     * @return self
     */
    public function setNetworkSettings($network_settings)
    {
        if (is_null($network_settings)) {
            throw new \InvalidArgumentException('non-nullable network_settings cannot be null');
        }
        $this->container['network_settings'] = $network_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


