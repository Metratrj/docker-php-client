<?php
/**
 * ContainerStatsResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.50) is used. For example, calling `/info` is the same as calling `/v1.51/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means the server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.51
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use DateTime;
use InvalidArgumentException;
use JsonSerializable;
use OpenAPI\Client\ObjectSerializer;
use ReturnTypeWillChange;

/**
 * ContainerStatsResponse Class Doc Comment
 *
 * @category Class
 * @description Statistics sample for a container.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContainerStatsResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ContainerStatsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'id' => 'string',
        'read' => '\DateTime',
        'preread' => '\DateTime',
        'pids_stats' => '\OpenAPI\Client\Model\ContainerPidsStats',
        'blkio_stats' => '\OpenAPI\Client\Model\ContainerBlkioStats',
        'num_procs' => 'int',
        'storage_stats' => '\OpenAPI\Client\Model\ContainerStorageStats',
        'cpu_stats' => '\OpenAPI\Client\Model\ContainerCPUStats',
        'precpu_stats' => '\OpenAPI\Client\Model\ContainerCPUStats',
        'memory_stats' => '\OpenAPI\Client\Model\ContainerMemoryStats',
        'networks' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'id' => null,
        'read' => 'date-time',
        'preread' => 'date-time',
        'pids_stats' => null,
        'blkio_stats' => null,
        'num_procs' => 'uint32',
        'storage_stats' => null,
        'cpu_stats' => null,
        'precpu_stats' => null,
        'memory_stats' => null,
        'networks' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => true,
        'id' => true,
        'read' => false,
        'preread' => false,
        'pids_stats' => true,
        'blkio_stats' => true,
        'num_procs' => false,
        'storage_stats' => true,
        'cpu_stats' => true,
        'precpu_stats' => true,
        'memory_stats' => false,
        'networks' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'id' => 'id',
        'read' => 'read',
        'preread' => 'preread',
        'pids_stats' => 'pids_stats',
        'blkio_stats' => 'blkio_stats',
        'num_procs' => 'num_procs',
        'storage_stats' => 'storage_stats',
        'cpu_stats' => 'cpu_stats',
        'precpu_stats' => 'precpu_stats',
        'memory_stats' => 'memory_stats',
        'networks' => 'networks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'id' => 'setId',
        'read' => 'setRead',
        'preread' => 'setPreread',
        'pids_stats' => 'setPidsStats',
        'blkio_stats' => 'setBlkioStats',
        'num_procs' => 'setNumProcs',
        'storage_stats' => 'setStorageStats',
        'cpu_stats' => 'setCpuStats',
        'precpu_stats' => 'setPrecpuStats',
        'memory_stats' => 'setMemoryStats',
        'networks' => 'setNetworks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'id' => 'getId',
        'read' => 'getRead',
        'preread' => 'getPreread',
        'pids_stats' => 'getPidsStats',
        'blkio_stats' => 'getBlkioStats',
        'num_procs' => 'getNumProcs',
        'storage_stats' => 'getStorageStats',
        'cpu_stats' => 'getCpuStats',
        'precpu_stats' => 'getPrecpuStats',
        'memory_stats' => 'getMemoryStats',
        'networks' => 'getNetworks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('read', $data ?? [], null);
        $this->setIfExists('preread', $data ?? [], null);
        $this->setIfExists('pids_stats', $data ?? [], null);
        $this->setIfExists('blkio_stats', $data ?? [], null);
        $this->setIfExists('num_procs', $data ?? [], null);
        $this->setIfExists('storage_stats', $data ?? [], null);
        $this->setIfExists('cpu_stats', $data ?? [], null);
        $this->setIfExists('precpu_stats', $data ?? [], null);
        $this->setIfExists('memory_stats', $data ?? [], null);
        $this->setIfExists('networks', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the container
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ID of the container
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets read
     *
     * @return DateTime|null
     */
    public function getRead()
    {
        return $this->container['read'];
    }

    /**
     * Sets read
     *
     * @param DateTime|null $read Date and time at which this sample was collected. The value is formatted as [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) with nano-seconds.
     *
     * @return self
     */
    public function setRead($read)
    {
        if (is_null($read)) {
            throw new InvalidArgumentException('non-nullable read cannot be null');
        }
        $this->container['read'] = $read;

        return $this;
    }

    /**
     * Gets preread
     *
     * @return DateTime|null
     */
    public function getPreread()
    {
        return $this->container['preread'];
    }

    /**
     * Sets preread
     *
     * @param DateTime|null $preread Date and time at which this first sample was collected. This field is not propagated if the \"one-shot\" option is set. If the \"one-shot\" option is set, this field may be omitted, empty, or set to a default date (`0001-01-01T00:00:00Z`).  The value is formatted as [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) with nano-seconds.
     *
     * @return self
     */
    public function setPreread($preread)
    {
        if (is_null($preread)) {
            throw new InvalidArgumentException('non-nullable preread cannot be null');
        }
        $this->container['preread'] = $preread;

        return $this;
    }

    /**
     * Gets pids_stats
     *
     * @return ContainerPidsStats|null
     */
    public function getPidsStats()
    {
        return $this->container['pids_stats'];
    }

    /**
     * Sets pids_stats
     *
     * @param ContainerPidsStats|null $pids_stats pids_stats
     *
     * @return self
     */
    public function setPidsStats($pids_stats)
    {
        if (is_null($pids_stats)) {
            array_push($this->openAPINullablesSetToNull, 'pids_stats');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pids_stats', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pids_stats'] = $pids_stats;

        return $this;
    }

    /**
     * Gets blkio_stats
     *
     * @return ContainerBlkioStats|null
     */
    public function getBlkioStats()
    {
        return $this->container['blkio_stats'];
    }

    /**
     * Sets blkio_stats
     *
     * @param ContainerBlkioStats|null $blkio_stats blkio_stats
     *
     * @return self
     */
    public function setBlkioStats($blkio_stats)
    {
        if (is_null($blkio_stats)) {
            array_push($this->openAPINullablesSetToNull, 'blkio_stats');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('blkio_stats', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['blkio_stats'] = $blkio_stats;

        return $this;
    }

    /**
     * Gets num_procs
     *
     * @return int|null
     */
    public function getNumProcs()
    {
        return $this->container['num_procs'];
    }

    /**
     * Sets num_procs
     *
     * @param int|null $num_procs The number of processors on the system.  This field is Windows-specific and always zero for Linux containers.
     *
     * @return self
     */
    public function setNumProcs($num_procs)
    {
        if (is_null($num_procs)) {
            throw new InvalidArgumentException('non-nullable num_procs cannot be null');
        }
        $this->container['num_procs'] = $num_procs;

        return $this;
    }

    /**
     * Gets storage_stats
     *
     * @return ContainerStorageStats|null
     */
    public function getStorageStats()
    {
        return $this->container['storage_stats'];
    }

    /**
     * Sets storage_stats
     *
     * @param ContainerStorageStats|null $storage_stats storage_stats
     *
     * @return self
     */
    public function setStorageStats($storage_stats)
    {
        if (is_null($storage_stats)) {
            array_push($this->openAPINullablesSetToNull, 'storage_stats');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_stats', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storage_stats'] = $storage_stats;

        return $this;
    }

    /**
     * Gets cpu_stats
     *
     * @return ContainerCPUStats|null
     */
    public function getCpuStats()
    {
        return $this->container['cpu_stats'];
    }

    /**
     * Sets cpu_stats
     *
     * @param ContainerCPUStats|null $cpu_stats cpu_stats
     *
     * @return self
     */
    public function setCpuStats($cpu_stats)
    {
        if (is_null($cpu_stats)) {
            array_push($this->openAPINullablesSetToNull, 'cpu_stats');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cpu_stats', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cpu_stats'] = $cpu_stats;

        return $this;
    }

    /**
     * Gets precpu_stats
     *
     * @return ContainerCPUStats|null
     */
    public function getPrecpuStats()
    {
        return $this->container['precpu_stats'];
    }

    /**
     * Sets precpu_stats
     *
     * @param ContainerCPUStats|null $precpu_stats precpu_stats
     *
     * @return self
     */
    public function setPrecpuStats($precpu_stats)
    {
        if (is_null($precpu_stats)) {
            array_push($this->openAPINullablesSetToNull, 'precpu_stats');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('precpu_stats', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['precpu_stats'] = $precpu_stats;

        return $this;
    }

    /**
     * Gets memory_stats
     *
     * @return ContainerMemoryStats|null
     */
    public function getMemoryStats()
    {
        return $this->container['memory_stats'];
    }

    /**
     * Sets memory_stats
     *
     * @param ContainerMemoryStats|null $memory_stats memory_stats
     *
     * @return self
     */
    public function setMemoryStats($memory_stats)
    {
        if (is_null($memory_stats)) {
            throw new InvalidArgumentException('non-nullable memory_stats cannot be null');
        }
        $this->container['memory_stats'] = $memory_stats;

        return $this;
    }

    /**
     * Gets networks
     *
     * @return object|null
     */
    public function getNetworks()
    {
        return $this->container['networks'];
    }

    /**
     * Sets networks
     *
     * @param object|null $networks Network statistics for the container per interface.  This field is omitted if the container has no networking enabled.
     *
     * @return self
     */
    public function setNetworks($networks)
    {
        if (is_null($networks)) {
            array_push($this->openAPINullablesSetToNull, 'networks');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('networks', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['networks'] = $networks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
